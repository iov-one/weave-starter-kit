// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/codec.proto

package app

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	custom "github.com/iov-one/weave-starter-kit/x/custom"
	cash "github.com/iov-one/weave/x/cash"
	sigs "github.com/iov-one/weave/x/sigs"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Tx contains the message
type Tx struct {
	// fee info, autogenerates GetFees()
	CashFees       *cash.FeeInfo        `protobuf:"bytes,20,opt,name=cash_fees,json=cashFees,proto3" json:"cash_fees,omitempty"`
	SigsSignatures []*sigs.StdSignature `protobuf:"bytes,21,rep,name=sigs_signatures,json=sigsSignatures,proto3" json:"sigs_signatures,omitempty"`
	// ID of a multisig contract.
	Multisig [][]byte `protobuf:"bytes,4,rep,name=multisig,proto3" json:"multisig,omitempty"`
	// msg is a sum type over all allowed messages on this chain.
	//
	// Types that are valid to be assigned to Sum:
	//	*Tx_CashSendMsg
	//	*Tx_CustomCreateStateIndexedMsg
	//	*Tx_CreateCustomStateMsg
	Sum isTx_Sum `protobuf_oneof:"sum"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e43b82f4f03f64b8, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

type isTx_Sum interface {
	isTx_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Tx_CashSendMsg struct {
	CashSendMsg *cash.SendMsg `protobuf:"bytes,51,opt,name=cash_send_msg,json=cashSendMsg,proto3,oneof"`
}
type Tx_CustomCreateStateIndexedMsg struct {
	CustomCreateStateIndexedMsg *custom.CreateCustomStateIndexedMsg `protobuf:"bytes,100,opt,name=custom_create_state_indexed_msg,json=customCreateStateIndexedMsg,proto3,oneof"`
}
type Tx_CreateCustomStateMsg struct {
	CreateCustomStateMsg *custom.CreateCustomStateMsg `protobuf:"bytes,101,opt,name=create_custom_state_msg,json=createCustomStateMsg,proto3,oneof"`
}

func (*Tx_CashSendMsg) isTx_Sum()                 {}
func (*Tx_CustomCreateStateIndexedMsg) isTx_Sum() {}
func (*Tx_CreateCustomStateMsg) isTx_Sum()        {}

func (m *Tx) GetSum() isTx_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Tx) GetCashFees() *cash.FeeInfo {
	if m != nil {
		return m.CashFees
	}
	return nil
}

func (m *Tx) GetSigsSignatures() []*sigs.StdSignature {
	if m != nil {
		return m.SigsSignatures
	}
	return nil
}

func (m *Tx) GetMultisig() [][]byte {
	if m != nil {
		return m.Multisig
	}
	return nil
}

func (m *Tx) GetCashSendMsg() *cash.SendMsg {
	if x, ok := m.GetSum().(*Tx_CashSendMsg); ok {
		return x.CashSendMsg
	}
	return nil
}

func (m *Tx) GetCustomCreateStateIndexedMsg() *custom.CreateCustomStateIndexedMsg {
	if x, ok := m.GetSum().(*Tx_CustomCreateStateIndexedMsg); ok {
		return x.CustomCreateStateIndexedMsg
	}
	return nil
}

func (m *Tx) GetCreateCustomStateMsg() *custom.CreateCustomStateMsg {
	if x, ok := m.GetSum().(*Tx_CreateCustomStateMsg); ok {
		return x.CreateCustomStateMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tx_OneofMarshaler, _Tx_OneofUnmarshaler, _Tx_OneofSizer, []interface{}{
		(*Tx_CashSendMsg)(nil),
		(*Tx_CustomCreateStateIndexedMsg)(nil),
		(*Tx_CreateCustomStateMsg)(nil),
	}
}

func _Tx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_CashSendMsg:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CashSendMsg); err != nil {
			return err
		}
	case *Tx_CustomCreateStateIndexedMsg:
		_ = b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomCreateStateIndexedMsg); err != nil {
			return err
		}
	case *Tx_CreateCustomStateMsg:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateCustomStateMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Tx.Sum has unexpected type %T", x)
	}
	return nil
}

func _Tx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tx)
	switch tag {
	case 51: // sum.cash_send_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cash.SendMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CashSendMsg{msg}
		return true, err
	case 100: // sum.custom_create_state_indexed_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(custom.CreateCustomStateIndexedMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CustomCreateStateIndexedMsg{msg}
		return true, err
	case 101: // sum.create_custom_state_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(custom.CreateCustomStateMsg)
		err := b.DecodeMessage(msg)
		m.Sum = &Tx_CreateCustomStateMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Tx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tx)
	// sum
	switch x := m.Sum.(type) {
	case *Tx_CashSendMsg:
		s := proto.Size(x.CashSendMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CustomCreateStateIndexedMsg:
		s := proto.Size(x.CustomCreateStateIndexedMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Tx_CreateCustomStateMsg:
		s := proto.Size(x.CreateCustomStateMsg)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Tx)(nil), "app.Tx")
}

func init() { proto.RegisterFile("app/codec.proto", fileDescriptor_e43b82f4f03f64b8) }

var fileDescriptor_e43b82f4f03f64b8 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4f, 0xe2, 0x40,
	0x14, 0xc7, 0xdb, 0xed, 0xee, 0x86, 0x1d, 0x96, 0x25, 0x99, 0xb0, 0xb1, 0x41, 0x53, 0x89, 0x5e,
	0x88, 0xc6, 0x69, 0x02, 0x47, 0x6f, 0x90, 0x10, 0x39, 0x78, 0x69, 0xf5, 0xdc, 0x94, 0xf6, 0x31,
	0x34, 0xda, 0x4e, 0xc3, 0x9b, 0x62, 0xbf, 0x82, 0x37, 0x3f, 0x96, 0x47, 0x8e, 0x1e, 0x0d, 0x7c,
	0x11, 0x33, 0x1d, 0x20, 0x68, 0xd4, 0x4b, 0x33, 0xff, 0xff, 0xfc, 0xfa, 0x7e, 0xaf, 0x29, 0x69,
	0x86, 0x79, 0xee, 0x46, 0x22, 0x86, 0x88, 0xe5, 0x73, 0x21, 0x05, 0xb5, 0xc2, 0x3c, 0x6f, 0x9f,
	0xf3, 0x44, 0xce, 0x8a, 0x09, 0x8b, 0x44, 0xea, 0x26, 0x62, 0x71, 0x21, 0x32, 0x70, 0x1f, 0x20,
	0x5c, 0x80, 0x5b, 0xba, 0x51, 0x88, 0xb3, 0xfd, 0x37, 0xbe, 0x85, 0x31, 0xe1, 0xf8, 0x0e, 0x6e,
	0x71, 0xc1, 0x45, 0x75, 0x74, 0xd5, 0x69, 0xdb, 0x96, 0x6e, 0x54, 0xa0, 0x14, 0xe9, 0x3e, 0x7b,
	0xf2, 0x68, 0x91, 0x1f, 0x37, 0x25, 0x3d, 0x23, 0x7f, 0x94, 0x33, 0x98, 0x02, 0xa0, 0xdd, 0xea,
	0x98, 0xdd, 0x7a, 0xaf, 0xc1, 0x54, 0xc3, 0x46, 0x00, 0xe3, 0x6c, 0x2a, 0xbc, 0x9a, 0x4a, 0x23,
	0x00, 0xa4, 0x97, 0xa4, 0xa9, 0x94, 0x01, 0x26, 0x3c, 0x0b, 0x65, 0x31, 0x07, 0xb4, 0xff, 0x77,
	0xac, 0x6e, 0xbd, 0x47, 0x99, 0xea, 0x99, 0x2f, 0x63, 0x7f, 0x7b, 0xe5, 0xfd, 0x53, 0xd5, 0x2e,
	0x22, 0x6d, 0x93, 0x5a, 0x5a, 0xdc, 0xcb, 0x04, 0x13, 0x6e, 0xff, 0xec, 0x58, 0xdd, 0xbf, 0xde,
	0x2e, 0xd3, 0x3e, 0x69, 0x54, 0x4b, 0x20, 0x64, 0x71, 0x90, 0x22, 0xb7, 0xfb, 0xfb, 0x8b, 0xf8,
	0x90, 0xc5, 0xd7, 0xc8, 0xaf, 0x0c, 0xaf, 0xae, 0xf2, 0x26, 0xd2, 0x3b, 0x72, 0xac, 0x3f, 0x2b,
	0x88, 0xe6, 0x10, 0x4a, 0x08, 0x50, 0xaa, 0x67, 0x92, 0xc5, 0x50, 0x82, 0x1e, 0x13, 0x57, 0x63,
	0x4e, 0x99, 0xe6, 0xd8, 0xb0, 0xe2, 0x86, 0x55, 0xf0, 0x15, 0x3c, 0xd6, 0xac, 0x1e, 0x7e, 0xa8,
	0x29, 0x0d, 0x7d, 0xb8, 0xa6, 0xb7, 0xe4, 0x60, 0x63, 0xd9, 0x38, 0xb5, 0x4c, 0x49, 0xa0, 0x92,
	0x1c, 0x7d, 0x29, 0xd1, 0xd3, 0x5b, 0xd1, 0x27, 0xfd, 0xe0, 0x17, 0xb1, 0xb0, 0x48, 0x07, 0xf6,
	0xf3, 0xca, 0x31, 0x97, 0x2b, 0xc7, 0x7c, 0x5d, 0x39, 0xe6, 0xd3, 0xda, 0x31, 0x96, 0x6b, 0xc7,
	0x78, 0x59, 0x3b, 0xc6, 0xe4, 0x77, 0xf5, 0xb3, 0xfa, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0x04, 0x0e, 0xa7, 0x4a, 0x02, 0x00, 0x00,
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCodec(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.CashFees != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CashFees.Size()))
		n1, err := m.CashFees.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.SigsSignatures) > 0 {
		for _, msg := range m.SigsSignatures {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCodec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Sum != nil {
		nn2, err := m.Sum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Tx_CashSendMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CashSendMsg != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CashSendMsg.Size()))
		n3, err := m.CashSendMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Tx_CustomCreateStateIndexedMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomCreateStateIndexedMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CustomCreateStateIndexedMsg.Size()))
		n4, err := m.CustomCreateStateIndexedMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Tx_CreateCustomStateMsg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateCustomStateMsg != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreateCustomStateMsg.Size()))
		n5, err := m.CreateCustomStateMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Multisig) > 0 {
		for _, b := range m.Multisig {
			l = len(b)
			n += 1 + l + sovCodec(uint64(l))
		}
	}
	if m.CashFees != nil {
		l = m.CashFees.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	if len(m.SigsSignatures) > 0 {
		for _, e := range m.SigsSignatures {
			l = e.Size()
			n += 2 + l + sovCodec(uint64(l))
		}
	}
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Tx_CashSendMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CashSendMsg != nil {
		l = m.CashSendMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CustomCreateStateIndexedMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomCreateStateIndexedMsg != nil {
		l = m.CustomCreateStateIndexedMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}
func (m *Tx_CreateCustomStateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateCustomStateMsg != nil {
		l = m.CreateCustomStateMsg.Size()
		n += 2 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multisig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multisig = append(m.Multisig, make([]byte, postIndex-iNdEx))
			copy(m.Multisig[len(m.Multisig)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CashFees == nil {
				m.CashFees = &cash.FeeInfo{}
			}
			if err := m.CashFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigsSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigsSignatures = append(m.SigsSignatures, &sigs.StdSignature{})
			if err := m.SigsSignatures[len(m.SigsSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashSendMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &cash.SendMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CashSendMsg{v}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomCreateStateIndexedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &custom.CreateCustomStateIndexedMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CustomCreateStateIndexedMsg{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateCustomStateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &custom.CreateCustomStateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Tx_CreateCustomStateMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
