// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/custom/codec.proto

package custom

import (
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	weave "github.com/iov-one/weave"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InnerStateEnum int32

const (
	InnerStateEnum_Invalid InnerStateEnum = 0
	InnerStateEnum_CaseOne InnerStateEnum = 1
	InnerStateEnum_CaseTwo InnerStateEnum = 2
)

var InnerStateEnum_name = map[int32]string{
	0: "INNER_STATE_ENUM_INVALID",
	1: "INNER_STATE_ENUM_CASE_1",
	2: "INNER_STATE_ENUM_CASE_2",
}

var InnerStateEnum_value = map[string]int32{
	"INNER_STATE_ENUM_INVALID": 0,
	"INNER_STATE_ENUM_CASE_1":  1,
	"INNER_STATE_ENUM_CASE_2":  2,
}

func (x InnerStateEnum) String() string {
	return proto.EnumName(InnerStateEnum_name, int32(x))
}

func (InnerStateEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{0}
}

type InnerState struct {
	St1 int64 `protobuf:"varint,1,opt,name=st1,proto3" json:"st1,omitempty"`
	St2 int64 `protobuf:"varint,2,opt,name=st2,proto3" json:"st2,omitempty"`
}

func (m *InnerState) Reset()         { *m = InnerState{} }
func (m *InnerState) String() string { return proto.CompactTextString(m) }
func (*InnerState) ProtoMessage()    {}
func (*InnerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{0}
}
func (m *InnerState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InnerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InnerState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InnerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerState.Merge(m, src)
}
func (m *InnerState) XXX_Size() int {
	return m.Size()
}
func (m *InnerState) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerState.DiscardUnknown(m)
}

var xxx_messageInfo_InnerState proto.InternalMessageInfo

func (m *InnerState) GetSt1() int64 {
	if m != nil {
		return m.St1
	}
	return 0
}

func (m *InnerState) GetSt2() int64 {
	if m != nil {
		return m.St2
	}
	return 0
}

type TimedState struct {
	Metadata       *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	InnerStateEnum InnerStateEnum  `protobuf:"varint,2,opt,name=inner_state_enum,json=innerStateEnum,proto3,enum=custom.InnerStateEnum" json:"inner_state_enum,omitempty"`
	Str            string          `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
	Byte           []byte          `protobuf:"bytes,4,opt,name=byte,proto3" json:"byte,omitempty"`
	// DeleteAt is a deletion event that will take place in future
	// Demonstrates cron usage
	DeleteAt     github_com_iov_one_weave.UnixTime `protobuf:"varint,5,opt,name=delete_at,json=deleteAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"delete_at,omitempty"`
	DeleteTaskID []byte                            `protobuf:"bytes,6,opt,name=delete_task_id,json=deleteTaskId,proto3" json:"delete_task_id,omitempty"`
}

func (m *TimedState) Reset()         { *m = TimedState{} }
func (m *TimedState) String() string { return proto.CompactTextString(m) }
func (*TimedState) ProtoMessage()    {}
func (*TimedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{1}
}
func (m *TimedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimedState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimedState.Merge(m, src)
}
func (m *TimedState) XXX_Size() int {
	return m.Size()
}
func (m *TimedState) XXX_DiscardUnknown() {
	xxx_messageInfo_TimedState.DiscardUnknown(m)
}

var xxx_messageInfo_TimedState proto.InternalMessageInfo

func (m *TimedState) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TimedState) GetInnerStateEnum() InnerStateEnum {
	if m != nil {
		return m.InnerStateEnum
	}
	return InnerStateEnum_Invalid
}

func (m *TimedState) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *TimedState) GetByte() []byte {
	if m != nil {
		return m.Byte
	}
	return nil
}

func (m *TimedState) GetDeleteAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.DeleteAt
	}
	return 0
}

func (m *TimedState) GetDeleteTaskID() []byte {
	if m != nil {
		return m.DeleteTaskID
	}
	return nil
}

type State struct {
	Metadata   *weave.Metadata                  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	InnerState *InnerState                      `protobuf:"bytes,2,opt,name=inner_state,json=innerState,proto3" json:"inner_state,omitempty"`
	Address    github_com_iov_one_weave.Address `protobuf:"bytes,3,opt,name=address,proto3,casttype=github.com/iov-one/weave.Address" json:"address,omitempty"`
	// Demonstrates timestamp in models
	CreatedAt github_com_iov_one_weave.UnixTime `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"created_at,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{2}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *State) GetInnerState() *InnerState {
	if m != nil {
		return m.InnerState
	}
	return nil
}

func (m *State) GetAddress() github_com_iov_one_weave.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *State) GetCreatedAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type CreateTimedStateMsg struct {
	Metadata       *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	InnerStateEnum InnerStateEnum  `protobuf:"varint,2,opt,name=inner_state_enum,json=innerStateEnum,proto3,enum=custom.InnerStateEnum" json:"inner_state_enum,omitempty"`
	Str            string          `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
	Byte           []byte          `protobuf:"bytes,4,opt,name=byte,proto3" json:"byte,omitempty"`
	// DeleteAt is a deletion event that will take place in future
	// Demonstrates cron usage
	DeleteAt github_com_iov_one_weave.UnixTime `protobuf:"varint,5,opt,name=delete_at,json=deleteAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"delete_at,omitempty"`
}

func (m *CreateTimedStateMsg) Reset()         { *m = CreateTimedStateMsg{} }
func (m *CreateTimedStateMsg) String() string { return proto.CompactTextString(m) }
func (*CreateTimedStateMsg) ProtoMessage()    {}
func (*CreateTimedStateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{3}
}
func (m *CreateTimedStateMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTimedStateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTimedStateMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTimedStateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTimedStateMsg.Merge(m, src)
}
func (m *CreateTimedStateMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateTimedStateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTimedStateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTimedStateMsg proto.InternalMessageInfo

func (m *CreateTimedStateMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateTimedStateMsg) GetInnerStateEnum() InnerStateEnum {
	if m != nil {
		return m.InnerStateEnum
	}
	return InnerStateEnum_Invalid
}

func (m *CreateTimedStateMsg) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *CreateTimedStateMsg) GetByte() []byte {
	if m != nil {
		return m.Byte
	}
	return nil
}

func (m *CreateTimedStateMsg) GetDeleteAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.DeleteAt
	}
	return 0
}

type DeleteTimedStateMsg struct {
	Metadata     *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TimedStateID []byte          `protobuf:"bytes,2,opt,name=timed_state_id,json=timedStateId,proto3" json:"timed_state_id,omitempty"`
}

func (m *DeleteTimedStateMsg) Reset()         { *m = DeleteTimedStateMsg{} }
func (m *DeleteTimedStateMsg) String() string { return proto.CompactTextString(m) }
func (*DeleteTimedStateMsg) ProtoMessage()    {}
func (*DeleteTimedStateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{4}
}
func (m *DeleteTimedStateMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTimedStateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTimedStateMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTimedStateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTimedStateMsg.Merge(m, src)
}
func (m *DeleteTimedStateMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTimedStateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTimedStateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTimedStateMsg proto.InternalMessageInfo

func (m *DeleteTimedStateMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteTimedStateMsg) GetTimedStateID() []byte {
	if m != nil {
		return m.TimedStateID
	}
	return nil
}

type CreateStateMsg struct {
	Metadata   *weave.Metadata                  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	InnerState *InnerState                      `protobuf:"bytes,2,opt,name=inner_state,json=innerState,proto3" json:"inner_state,omitempty"`
	Address    github_com_iov_one_weave.Address `protobuf:"bytes,3,opt,name=address,proto3,casttype=github.com/iov-one/weave.Address" json:"address,omitempty"`
}

func (m *CreateStateMsg) Reset()         { *m = CreateStateMsg{} }
func (m *CreateStateMsg) String() string { return proto.CompactTextString(m) }
func (*CreateStateMsg) ProtoMessage()    {}
func (*CreateStateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0271811e1b825e2d, []int{5}
}
func (m *CreateStateMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStateMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStateMsg.Merge(m, src)
}
func (m *CreateStateMsg) XXX_Size() int {
	return m.Size()
}
func (m *CreateStateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStateMsg proto.InternalMessageInfo

func (m *CreateStateMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateStateMsg) GetInnerState() *InnerState {
	if m != nil {
		return m.InnerState
	}
	return nil
}

func (m *CreateStateMsg) GetAddress() github_com_iov_one_weave.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterEnum("custom.InnerStateEnum", InnerStateEnum_name, InnerStateEnum_value)
	proto.RegisterType((*InnerState)(nil), "custom.InnerState")
	proto.RegisterType((*TimedState)(nil), "custom.TimedState")
	proto.RegisterType((*State)(nil), "custom.State")
	proto.RegisterType((*CreateTimedStateMsg)(nil), "custom.CreateTimedStateMsg")
	proto.RegisterType((*DeleteTimedStateMsg)(nil), "custom.DeleteTimedStateMsg")
	proto.RegisterType((*CreateStateMsg)(nil), "custom.CreateStateMsg")
}

func init() { proto.RegisterFile("x/custom/codec.proto", fileDescriptor_0271811e1b825e2d) }

var fileDescriptor_0271811e1b825e2d = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xb6, 0x69, 0xda, 0x4c, 0x22, 0x63, 0x6d, 0x2b, 0xb0, 0x72, 0x70, 0x82, 0x05, 0x52,
	0x00, 0xe1, 0x50, 0x57, 0xea, 0x11, 0xe1, 0x7c, 0x1c, 0x2c, 0x91, 0x20, 0x39, 0x29, 0x57, 0x6b,
	0x93, 0x5d, 0x05, 0xab, 0xb5, 0x8d, 0xec, 0x4d, 0x5a, 0xf8, 0x09, 0x5c, 0xe0, 0x0f, 0xf4, 0x4f,
	0xf0, 0x2b, 0x38, 0xf6, 0xc8, 0x29, 0x42, 0xc9, 0x1d, 0xee, 0x3d, 0xa1, 0xf5, 0xba, 0xb8, 0x55,
	0xd5, 0x03, 0xb9, 0x20, 0x71, 0x9b, 0x99, 0xbc, 0xb7, 0xf3, 0xe6, 0xe5, 0xc9, 0xb0, 0x77, 0xd6,
	0x9a, 0xcc, 0x12, 0x1e, 0x05, 0xad, 0x49, 0x44, 0xd9, 0xc4, 0x7c, 0x1f, 0x47, 0x3c, 0xc2, 0x25,
	0x39, 0xab, 0x55, 0xae, 0x0d, 0x6b, 0x7b, 0xd3, 0x68, 0x1a, 0xa5, 0x65, 0x4b, 0x54, 0x72, 0x6a,
	0xbc, 0x00, 0x70, 0xc2, 0x90, 0xc5, 0x43, 0x4e, 0x38, 0xc3, 0x2a, 0x6c, 0x26, 0x7c, 0x5f, 0x43,
	0x0d, 0xd4, 0xdc, 0x74, 0x45, 0x29, 0x27, 0x96, 0xb6, 0x71, 0x35, 0xb1, 0x8c, 0xf3, 0x0d, 0x80,
	0x91, 0x1f, 0x30, 0x2a, 0x29, 0xcf, 0x60, 0x27, 0x60, 0x9c, 0x50, 0xc2, 0x49, 0xca, 0xab, 0x58,
	0xf7, 0xcc, 0x53, 0x46, 0xe6, 0xcc, 0xec, 0x67, 0x63, 0xf7, 0x0f, 0x00, 0xbf, 0x02, 0xd5, 0x17,
	0xdb, 0xbc, 0x44, 0x70, 0x3d, 0x16, 0xce, 0x82, 0xf4, 0x69, 0xc5, 0xba, 0x6f, 0x4a, 0xcd, 0x66,
	0xae, 0xa6, 0x17, 0xce, 0x02, 0x57, 0xf1, 0x6f, 0xf4, 0x52, 0x4f, 0xac, 0x6d, 0x36, 0x50, 0xb3,
	0x2c, 0xf4, 0xc4, 0x18, 0x43, 0x71, 0xfc, 0x81, 0x33, 0xad, 0xd8, 0x40, 0xcd, 0xaa, 0x9b, 0xd6,
	0xb8, 0x0d, 0x65, 0xca, 0x4e, 0x18, 0x67, 0x1e, 0xe1, 0xda, 0x96, 0xd0, 0xde, 0x7e, 0x7c, 0xb9,
	0xa8, 0x3f, 0x9c, 0xfa, 0xfc, 0xdd, 0x6c, 0x6c, 0x4e, 0xa2, 0xa0, 0xe5, 0x47, 0xf3, 0xe7, 0x51,
	0xc8, 0x5a, 0x52, 0xeb, 0x51, 0xe8, 0x9f, 0x89, 0xa3, 0xdc, 0x1d, 0xc9, 0xb3, 0x39, 0x3e, 0x04,
	0x25, 0x7b, 0x83, 0x93, 0xe4, 0xd8, 0xf3, 0xa9, 0x56, 0x12, 0x1b, 0xda, 0xea, 0x72, 0x51, 0xaf,
	0x76, 0xd3, 0x5f, 0x46, 0x24, 0x39, 0x76, 0xba, 0x6e, 0x95, 0xe6, 0x1d, 0x35, 0x7e, 0x21, 0xd8,
	0x5a, 0xc3, 0x9a, 0x03, 0xa8, 0x5c, 0xb3, 0x26, 0x75, 0xa5, 0x62, 0xe1, 0xdb, 0xae, 0xb8, 0x90,
	0x3b, 0x82, 0x5f, 0xc2, 0x36, 0xa1, 0x34, 0x66, 0x49, 0x92, 0x3a, 0x52, 0x6d, 0x3f, 0xba, 0x5c,
	0xd4, 0x1b, 0x77, 0x5e, 0x69, 0x4b, 0xac, 0x7b, 0x45, 0xc2, 0x5d, 0x80, 0x49, 0xcc, 0x08, 0x67,
	0x54, 0x18, 0x55, 0xfc, 0x1b, 0xa3, 0xca, 0x19, 0xd1, 0xe6, 0xc6, 0x4f, 0x04, 0xbb, 0x9d, 0xb4,
	0xcb, 0x73, 0xd1, 0x4f, 0xa6, 0xff, 0x6d, 0x34, 0x8c, 0x8f, 0xb0, 0x9b, 0x05, 0x60, 0xfd, 0x7b,
	0x0f, 0x41, 0xe1, 0x82, 0x9d, 0xdd, 0xeb, 0xd3, 0xf4, 0xda, 0x2c, 0x5e, 0xf9, 0xbb, 0x22, 0x5e,
	0x3c, 0xef, 0xa8, 0xf1, 0x15, 0x81, 0x22, 0xcd, 0x5e, 0x6f, 0xef, 0xbf, 0xc8, 0xd9, 0xd3, 0xcf,
	0x08, 0x94, 0x9b, 0xff, 0x1e, 0x7e, 0x02, 0x9a, 0x33, 0x18, 0xf4, 0x5c, 0x6f, 0x38, 0xb2, 0x47,
	0x3d, 0xaf, 0x37, 0x38, 0xea, 0x7b, 0xce, 0xe0, 0xad, 0xfd, 0xda, 0xe9, 0xaa, 0x85, 0x5a, 0xe5,
	0xd3, 0x79, 0x63, 0xdb, 0x09, 0xe7, 0xe4, 0xc4, 0xa7, 0xb8, 0x09, 0x0f, 0x6e, 0x41, 0x3b, 0xf6,
	0xb0, 0xe7, 0xed, 0xab, 0x48, 0x22, 0x3b, 0x24, 0x61, 0x6f, 0x42, 0x76, 0x37, 0xd2, 0x52, 0x37,
	0x72, 0xe4, 0xe8, 0x34, 0x6a, 0x6b, 0xdf, 0x96, 0x3a, 0xba, 0x58, 0xea, 0xe8, 0xc7, 0x52, 0x47,
	0x5f, 0x56, 0x7a, 0xe1, 0x62, 0xa5, 0x17, 0xbe, 0xaf, 0xf4, 0xc2, 0xb8, 0x94, 0x7e, 0x18, 0x0f,
	0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x43, 0x91, 0xbc, 0x7a, 0x5b, 0x05, 0x00, 0x00,
}

func (m *InnerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.St1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.St1))
	}
	if m.St2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.St2))
	}
	return i, nil
}

func (m *TimedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.InnerStateEnum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.InnerStateEnum))
	}
	if len(m.Str) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if len(m.Byte) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Byte)))
		i += copy(dAtA[i:], m.Byte)
	}
	if m.DeleteAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DeleteAt))
	}
	if len(m.DeleteTaskID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.DeleteTaskID)))
		i += copy(dAtA[i:], m.DeleteTaskID)
	}
	return i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.InnerState != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.InnerState.Size()))
		n3, err := m.InnerState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *CreateTimedStateMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTimedStateMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n4, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.InnerStateEnum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.InnerStateEnum))
	}
	if len(m.Str) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if len(m.Byte) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Byte)))
		i += copy(dAtA[i:], m.Byte)
	}
	if m.DeleteAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.DeleteAt))
	}
	return i, nil
}

func (m *DeleteTimedStateMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTimedStateMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n5, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.TimedStateID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.TimedStateID)))
		i += copy(dAtA[i:], m.TimedStateID)
	}
	return i, nil
}

func (m *CreateStateMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStateMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n6, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.InnerState != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.InnerState.Size()))
		n7, err := m.InnerState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InnerState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.St1 != 0 {
		n += 1 + sovCodec(uint64(m.St1))
	}
	if m.St2 != 0 {
		n += 1 + sovCodec(uint64(m.St2))
	}
	return n
}

func (m *TimedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.InnerStateEnum != 0 {
		n += 1 + sovCodec(uint64(m.InnerStateEnum))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Byte)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.DeleteAt != 0 {
		n += 1 + sovCodec(uint64(m.DeleteAt))
	}
	l = len(m.DeleteTaskID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.InnerState != nil {
		l = m.InnerState.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovCodec(uint64(m.CreatedAt))
	}
	return n
}

func (m *CreateTimedStateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.InnerStateEnum != 0 {
		n += 1 + sovCodec(uint64(m.InnerStateEnum))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Byte)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.DeleteAt != 0 {
		n += 1 + sovCodec(uint64(m.DeleteAt))
	}
	return n
}

func (m *DeleteTimedStateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.TimedStateID)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *CreateStateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.InnerState != nil {
		l = m.InnerState.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InnerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field St1", wireType)
			}
			m.St1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.St1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field St2", wireType)
			}
			m.St2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.St2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerStateEnum", wireType)
			}
			m.InnerStateEnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerStateEnum |= InnerStateEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byte", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Byte = append(m.Byte[:0], dAtA[iNdEx:postIndex]...)
			if m.Byte == nil {
				m.Byte = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAt", wireType)
			}
			m.DeleteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTaskID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteTaskID = append(m.DeleteTaskID[:0], dAtA[iNdEx:postIndex]...)
			if m.DeleteTaskID == nil {
				m.DeleteTaskID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerState == nil {
				m.InnerState = &InnerState{}
			}
			if err := m.InnerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTimedStateMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTimedStateMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTimedStateMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerStateEnum", wireType)
			}
			m.InnerStateEnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerStateEnum |= InnerStateEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byte", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Byte = append(m.Byte[:0], dAtA[iNdEx:postIndex]...)
			if m.Byte == nil {
				m.Byte = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAt", wireType)
			}
			m.DeleteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTimedStateMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTimedStateMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTimedStateMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedStateID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimedStateID = append(m.TimedStateID[:0], dAtA[iNdEx:postIndex]...)
			if m.TimedStateID == nil {
				m.TimedStateID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStateMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStateMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStateMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerState == nil {
				m.InnerState = &InnerState{}
			}
			if err := m.InnerState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
