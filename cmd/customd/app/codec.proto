syntax = "proto3";

package app;

import "github.com/iov-one/weave/migration/codec.proto";
import "github.com/iov-one/weave/x/cash/codec.proto";
import "github.com/iov-one/weave/x/currency/codec.proto";
import "github.com/iov-one/weave/x/multisig/codec.proto";
import "github.com/iov-one/weave/x/sigs/codec.proto";
import "github.com/iov-one/weave/x/validators/codec.proto";
import "gogoproto/gogo.proto";
import "x/custom/codec.proto";

// Tx contains the message
// When extending Tx, follow the rules:
// - Range 1-50 is reserved for middlewares,
// - Range 51-inf is reserved for different message types,
// - Keep the same numbers for the same message types in weave based applications to
//   sustain compatibility between blockchains. For example, FeeInfo field is used by
//   both and indexed at first position. Skip unused fields (leave index unused or
//   comment out for clarity).
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
message Tx {
  // Enables coin.GetFees()
  cash.FeeInfo fees = 1;
  //StdSignature represents the signature, the identity of the signer
  // (the Pubkey), and a sequence number to prevent replay attacks.
  repeated sigs.StdSignature signatures = 2;
  // ID of a multisig contract.
  repeated bytes multisig = 4;
  // sum defines over all allowed messages on this chain.
  oneof sum {
    cash.SendMsg cash_send_msg = 51;
    multisig.CreateMsg create_contract_msg = 56;
    multisig.UpdateMsg update_contract_msg = 57;
    validators.ApplyDiffMsg validators_apply_diff_msg = 58;
    currency.CreateMsg currency_create_msg = 59;
    migration.UpgradeSchemaMsg migration_upgrade_schema_msg = 69;
    custom.CreateTimedStateMsg custom_create_timed_state_msg = 100;
    custom.CreateStateMsg custom_create_state_msg = 102;
  }
}

// CronTask is a format used by the CronMarshaler to marshal and unmarshal cron
// task.
//
// When there is a gap in message sequence numbers - that most likely means some
// old fields got deprecated. This is done to maintain binary compatibility.
message CronTask {
  // Authenticators contains a list of conditions that authenticate execution
  // of this task.
  // This is one of the main differences between the CronTask and Tx entities.
  // CronTask is created interanlly and does not have to be signed. Because we
  // use the same handlers as for the Tx to process a cron task, we must
  // provide authentication method. This attribute contains all authentication
  // conditions required for execution, that will be inserted into the context.
  repeated bytes authenticators = 1 [(gogoproto.casttype) = "github.com/iov-one/weave.Condition"];
  // Use the same indexes for the messages as the Tx message.
  oneof sum {
    custom.DeleteTimedStateMsg custom_delete_timed_state_msg = 101;
  }
}
